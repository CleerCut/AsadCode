import CustomButton from "@/common/components/custom-button/custom-button.component";
import CustomInput from "@/common/components/custom-input/custom-input.component";
import SimpleSelect from "@/common/components/dropdowns/simple-select/simple-select";
import Modal from "@/common/components/modal/modal.component";
import { AddCircle } from "@mui/icons-material";
import { useState } from "react";

const TaskManagerModal = ({ show, onClose }) => {
  const [selectedCampaign, setSelectedCampaign] = useState("all");
  const [showAddTask, setShowAddTask] = useState(false);
  const [newTaskText, setNewTaskText] = useState("");
  const [newTaskCampaign, setNewTaskCampaign] = useState("");

  // Sample campaign data for dropdown
  const campaigns = [
    { label: "All Campaigns", value: "all" },
    { label: "Summer Beauty Campaign", value: "summer-beauty" },
    { label: "Tech Review Series", value: "tech-review" },
    { label: "Fashion Haul Q3", value: "fashion-haul" },
    { label: "Fitness Challenge", value: "fitness-challenge" },
  ];

  // Sample tasks data - in real app this would come from your backend
  const [tasks, setTasks] = useState([
    {
      id: 1,
      campaignName: "Summer Beauty Campaign",
      campaignId: "summer-beauty",
      taskTitle: "Review Draft from Sarah Martinez",
      dateTriggered: "July 2",
      actionType: "review-draft",
      actionButton: "Review Video",
      isAutoGenerated: true,
      creatorName: "Sarah Martinez",
    },
    {
      id: 2,
      campaignName: "Tech Review Series",
      campaignId: "tech-review",
      taskTitle: "Mark Campaign Complete",
      dateTriggered: "July 1",
      actionType: "mark-complete",
      actionButton: "Mark Complete",
      isAutoGenerated: true,
      creatorName: "Mike Chen",
    },
    {
      id: 3,
      campaignName: "Fashion Haul Q3",
      campaignId: "fashion-haul",
      taskTitle: "Review Updated Draft",
      dateTriggered: "June 30",
      actionType: "review-revision",
      actionButton: "Review Video",
      isAutoGenerated: true,
      creatorName: "Emma Wilson",
    },
    {
      id: 4,
      campaignName: "Summer Beauty Campaign",
      campaignId: "summer-beauty",
      taskTitle: "Review & Counter-Sign Agreement",
      dateTriggered: "June 29",
      actionType: "review-contract",
      actionButton: "View Contract",
      isAutoGenerated: true,
      creatorName: "Lisa Johnson",
    },
    {
      id: 5,
      campaignName: "Fitness Challenge",
      campaignId: "fitness-challenge",
      taskTitle: "Follow up with creator about timeline",
      dateTriggered: "June 28",
      actionType: "custom",
      actionButton: "Send Message",
      isAutoGenerated: false,
      creatorName: "Alex Rodriguez",
    },
  ]);

  // Filter tasks based on selected campaign
  const filteredTasks = tasks.filter(
    (task) => selectedCampaign === "all" || task.campaignId === selectedCampaign
  );

  // Get emoji icon for task type
  const getTaskIcon = (actionType) => {
    switch (actionType) {
      case "review-draft":
      case "review-revision":
        return "ðŸŽ¬";
      case "mark-complete":
        return "âœ…";
      case "review-contract":
        return "ðŸ“„";
      case "custom":
        return "ðŸ’¬";
      default:
        return "ðŸ“‹";
    }
  };

  // Get status color for task type
  const getTaskStatusColor = (actionType) => {
    switch (actionType) {
      case "review-draft":
      case "review-revision":
        return "bg-blue-100 text-blue-800";
      case "mark-complete":
        return "bg-green-100 text-green-800";
      case "review-contract":
        return "bg-purple-100 text-purple-800";
      case "custom":
        return "bg-gray-100 text-gray-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  // Handle task action - this would deep link to appropriate sections
  const handleTaskAction = (task) => {
    console.log(`Handling action for task: ${task.id} - ${task.actionType}`);

    // Remove the task from the list once action is taken
    setTasks((prevTasks) => prevTasks.filter((t) => t.id !== task.id));

    // In real app, this would deep link to:
    // - Review Video â†’ Opens campaign > creator > draft modal
    // - Mark Complete â†’ Auto-triggers campaign step complete & payout
    // - Send Feedback â†’ Opens messaging window
    // - View Contract â†’ Opens contract agreement section

    // For now, just show which action would be taken
    alert(`Action: ${task.actionButton} for ${task.taskTitle}`);
  };

  // Add custom task
  const addCustomTask = () => {
    if (newTaskText.trim() && newTaskCampaign) {
      const selectedCampaignData =
        campaigns.find((c) => c.value === newTaskCampaign) || newTaskCampaign;

      const newTask = {
        id: Date.now(),
        campaignName: selectedCampaignData.label,
        campaignId: newTaskCampaign,
        taskTitle: newTaskText,
        dateTriggered: new Date().toLocaleDateString("en-US", { month: "long", day: "numeric" }),
        actionType: "custom",
        actionButton: "Send Message",
        isAutoGenerated: false,
        creatorName: "Manual Task",
      };

      setTasks((prevTasks) => [newTask, ...prevTasks]);
      setNewTaskText("");
      setNewTaskCampaign("");
      setShowAddTask(false);
    }
  };

  return (
    <Modal show={show} title="Task Manager" onClose={onClose} size="lg">
      <div className="p-1">
        {/* Compact Header */}
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center gap-2">
            <h3 className="text-lg font-bold text-gray-900">Pending Tasks</h3>
            <div className="bg-primary text-white text-xs px-2 py-1 rounded-full font-medium">
              {filteredTasks.length}
            </div>
          </div>

          <div className="flex items-center gap-2">
            <SimpleSelect
              placeHolder="All Campaigns"
              options={campaigns}
              value={selectedCampaign}
              onChange={(value) => setSelectedCampaign(value)}
              className="min-w-[180px]"
            />

            <button className="bg-gray-200 p-2 rounded-full" onClick={() => setShowAddTask(true)}>
              <AddCircle className="text-primary" />
            </button>
          </div>
        </div>

        {/* Add Task Form */}
        {showAddTask && (
          <div className="mb-3 p-3 bg-gray-50 rounded-lg border border-gray-200">
            <div className="space-y-2">
              <div className="flex justify-between gap-6">
                <CustomInput
                  placeholder="What needs to be done?"
                  value={newTaskText}
                  onChange={(e) => setNewTaskText(e.target.value)}
                  className="!bg-white"
                />
                <SimpleSelect
                  placeHolder="Select Campaign"
                  options={campaigns.filter((c) => c.value !== "all")}
                  value={newTaskCampaign}
                  onChange={(value) => setNewTaskCampaign(value)}
                />
              </div>
              <div className="flex justify-end gap-2">
                <CustomButton
                  text="Add Task"
                  onClick={addCustomTask}
                  disabled={!newTaskText.trim() || !newTaskCampaign}
                  className="btn-primary text-sm px-3 py-1"
                />
                <CustomButton
                  text="Cancel"
                  onClick={() => {
                    setShowAddTask(false);
                    setNewTaskText("");
                    setNewTaskCampaign("");
                  }}
                  className="btn-outline text-sm px-3 py-1"
                />
              </div>
            </div>
          </div>
        )}

        {/* Compact Task List */}
        <div className="space-y-2 max-h-80 overflow-y-auto">
          {filteredTasks.length === 0 ? (
            <div className="text-center py-6">
              <p className="text-gray-500 text-sm">No pending tasks</p>
              <p className="text-xs text-gray-400 mt-1">
                {selectedCampaign === "all"
                  ? "All caught up! Tasks appear when creators submit drafts or complete milestones."
                  : "No tasks for this campaign."}
              </p>
            </div>
          ) : (
            filteredTasks.map((task) => (
              <div
                key={task.id}
                className="bg-white border border-gray-200 rounded-lg p-3 hover:shadow-sm transition-all hover:border-gray-300"
              >
                <div className="flex items-center justify-between gap-3">
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <div className="flex-1 min-w-0">
                      <h4 className="font-semibold text-gray-900 text-sm truncate">
                        {task.taskTitle}
                      </h4>
                      <div className="flex items-center gap-2 mt-1">
                        <span className="text-xs font-medium text-primary truncate">
                          {task.campaignName}
                        </span>
                        <span className="text-xs text-gray-500 flex-shrink-0">
                          {task.dateTriggered}
                        </span>
                        {!task.isAutoGenerated && (
                          <span className="text-xs bg-amber-100 text-amber-700 px-1.5 py-0.5 rounded-full flex-shrink-0">
                            Manual
                          </span>
                        )}
                      </div>
                    </div>
                  </div>

                  <div className="flex-shrink-0">
                    <CustomButton
                      text={task.actionButton}
                      onClick={() => handleTaskAction(task)}
                      className="btn-primary text-xs px-3 py-1"
                    />
                  </div>
                </div>
              </div>
            ))
          )}
        </div>

        {/* Footer */}
        <div className="mt-3 pt-2 border-t border-gray-200">
          <p className="text-xs text-gray-500">
            Tasks auto-create when creators submit drafts or complete milestones. Once you take
            action, tasks are removed.
          </p>
        </div>
      </div>
    </Modal>
  );
};

export default TaskManagerModal;
