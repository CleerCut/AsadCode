import CustomButton from "@/common/components/custom-button/custom-button.component";
import CustomInput from "@/common/components/custom-input/custom-input.component";
import SimpleSelect from "@/common/components/dropdowns/simple-select/simple-select";
import Modal from "@/common/components/modal/modal.component";
import { CheckSquare, ChevronLeft, ChevronRight, Plus, Square } from "lucide-react";
import { useState } from "react";

const BrandCalendarModal = ({ show, onClose }) => {
  const [selectedDate, setSelectedDate] = useState(15);
  const [currentMonth, setCurrentMonth] = useState({ month: 7, year: 2025 });
  const [newTaskText, setNewTaskText] = useState("");
  const [selectedTag, setSelectedTag] = useState("");
  const [showAddTag, setShowAddTag] = useState(false);
  const [newTagName, setNewTagName] = useState("");
  const [newTagColor, setNewTagColor] = useState("bg-gray-100 text-gray-800");

  // Brand calendar tasks with campaign deadlines and custom tasks
  const [calendarTasks, setCalendarTasks] = useState({
    12: [
      {
        id: 1,
        text: "Final post due - Sarah's Summer Campaign",
        completed: false,
        tag: { label: "Campaign Deadline", value: "bg-red-500 text-white" },
        isAutoGenerated: true,
      },
      {
        id: 2,
        text: "Ship product to @SarahBeauty",
        completed: false,
        tag: { label: "Shipping", value: "bg-blue-500 text-white" },
        isAutoGenerated: false,
      },
    ],
    15: [
      {
        id: 3,
        text: "1st Draft due - Mike's Tech Review",
        completed: false,
        tag: { label: "1st Draft Deadline", value: "bg-orange-500 text-white" },
        isAutoGenerated: true,
      },
      {
        id: 4,
        text: "Review edits for Summer Campaign",
        completed: true,
        tag: { label: "Review", value: "bg-purple-500 text-white" },
        isAutoGenerated: false,
      },
    ],
    18: [
      {
        id: 5,
        text: "Final post due - Emma's Fashion Haul",
        completed: false,
        tag: { label: "Campaign Deadline", value: "bg-red-500 text-white" },
        isAutoGenerated: true,
      },
      {
        id: 6,
        text: "Send approval to Legal by 3 PM",
        completed: false,
        tag: { label: "Legal", value: "bg-yellow-500 text-white" },
        isAutoGenerated: false,
      },
    ],
    22: [
      {
        id: 7,
        text: "1st Draft due - Alex's Fitness Content",
        completed: false,
        tag: { label: "1st Draft Deadline", value: "bg-orange-500 text-white" },
        isAutoGenerated: true,
      },
      {
        id: 8,
        text: "Manager handoff - Q3 Campaign Results",
        completed: false,
        tag: { label: "Internal", value: "bg-green-500 text-white" },
        isAutoGenerated: false,
      },
    ],
    25: [
      {
        id: 9,
        text: "Final post due - Lisa's Beauty Tutorial",
        completed: false,
        tag: { label: "Campaign Deadline", value: "bg-red-500 text-white" },
        isAutoGenerated: true,
      },
    ],
  });

  // Color tags for brand calendar
  const [colorTags, setColorTags] = useState([
    { label: "Campaign Deadline", value: "bg-red-500 text-white" },
    { label: "1st Draft Deadline", value: "bg-orange-500 text-white" },
    { label: "Review", value: "bg-purple-500 text-white" },
    { label: "Shipping", value: "bg-blue-500 text-white" },
    { label: "Legal", value: "bg-yellow-500 text-white" },
    { label: "Internal", value: "bg-green-500 text-white" },
    { label: "Manager Handoff", value: "bg-teal-500 text-white" },
  ]);

  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const colorOptions = [
    "bg-blue-500 text-white",
    "bg-green-500 text-white",
    "bg-purple-500 text-white",
    "bg-yellow-500 text-white",
    "bg-teal-500 text-white",
    "bg-pink-500 text-white",
  ];

  const handleDateClick = (day) => {
    setSelectedDate(day);
  };

  const addTask = () => {
    if (newTaskText.trim() && selectedTag) {
      const newTask = {
        id: Date.now(),
        text: newTaskText,
        completed: false,
        tag: selectedTag,
        isAutoGenerated: false,
      };

      setCalendarTasks((prev) => ({
        ...prev,
        [selectedDate]: [...(prev[selectedDate] || []), newTask],
      }));

      setNewTaskText("");
      setSelectedTag("");
    }
  };

  const toggleTask = (taskId) => {
    setCalendarTasks((prev) => ({
      ...prev,
      [selectedDate]:
        prev[selectedDate]?.map((task) =>
          task.id === taskId ? { ...task, completed: !task.completed } : task
        ) || [],
    }));
  };

  const addColorTag = () => {
    if (newTagName.trim()) {
      setColorTags((prev) => [...prev, { label: newTagName, value: newTagColor }]);
      setNewTagName("");
      setShowAddTag(false);
    }
  };

  const getTagColor = (tagName) => {
    const tag = colorTags.find((t) => t.label === tagName);
    return tag ? tag.value : "bg-gray-100 text-gray-800";
  };

  // Get dot indicators for calendar dates
  const getDateIndicators = (day) => {
    const tasks = calendarTasks[day] || [];
    const hasDeadline = tasks.some((task) => task.tag.label === "Campaign Deadline");
    const hasDraft = tasks.some((task) => task.tag.label === "1st Draft Deadline");
    const hasOther = tasks.some(
      (task) => !["Campaign Deadline", "1st Draft Deadline"].includes(task.tag.label)
    );

    return { hasDeadline, hasDraft, hasOther };
  };

  const navigateMonth = (direction) => {
    setCurrentMonth((prev) => {
      const newMonth = direction === "next" ? prev.month + 1 : prev.month - 1;
      if (newMonth > 12) return { month: 1, year: prev.year + 1 };
      if (newMonth < 1) return { month: 12, year: prev.year - 1 };
      return { ...prev, month: newMonth };
    });
  };

  return (
    <Modal show={show} title="Calendar & To Do List" onClose={onClose} size="xl">
      <div className="grid grid-cols-5 gap-4 p-1">
        {/* Calendar (60%) */}
        <div className="col-span-3">
          {/* Month Navigation */}
          <div className="flex items-center justify-between mb-2">
            <h3 className="text-lg font-bold text-gray-900">
              {monthNames[currentMonth.month - 1]} {currentMonth.year}
            </h3>
            <div className="flex gap-1">
              <button
                onClick={() => navigateMonth("prev")}
                className="w-8 h-8 flex items-center justify-center rounded-lg hover:bg-gray-100 transition-colors"
              >
                <ChevronLeft className="w-4 h-4" />
              </button>
              <button
                onClick={() => navigateMonth("next")}
                className="w-8 h-8 flex items-center justify-center rounded-lg hover:bg-gray-100 transition-colors"
              >
                <ChevronRight className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Calendar Grid */}
          <div className="bg-gray-100 rounded-lg p-3 mb-3">
            <div className="grid grid-cols-7 gap-1 mb-2">
              {["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"].map((day) => (
                <div key={day} className="p-2 text-xs font-semibold text-gray-500 text-left">
                  {day}
                </div>
              ))}
              {Array.from({ length: 31 }, (_, i) => i + 1).map((day) => {
                const indicators = getDateIndicators(day);
                const isSelected = selectedDate === day;
                const hasAnyTask =
                  indicators.hasDeadline || indicators.hasDraft || indicators.hasOther;

                return (
                  <div
                    key={day}
                    onClick={() => handleDateClick(day)}
                    className={`relative h-8 w-8 flex items-center justify-center text-xs font-medium cursor-pointer rounded-full transition-all ${
                      isSelected
                        ? "bg-primary text-white shadow-md scale-105"
                        : hasAnyTask
                          ? "bg-white shadow-sm hover:shadow-md border border-gray-200 hover:border-gray-300"
                          : "hover:bg-white hover:shadow-sm"
                    }`}
                  >
                    {day}

                    {/* Compact dot indicators */}
                    {(indicators.hasDeadline || indicators.hasDraft || indicators.hasOther) && (
                      <div className="absolute -top-0.5 -right-0.5 flex gap-0.5">
                        {indicators.hasDeadline && (
                          <div className="w-1.5 h-1.5 bg-red-500 rounded-full"></div>
                        )}
                        {indicators.hasDraft && (
                          <div className="w-1.5 h-1.5 bg-orange-500 rounded-full"></div>
                        )}
                        {indicators.hasOther && (
                          <div className="w-1.5 h-1.5 bg-blue-500 rounded-full"></div>
                        )}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>

          {/* Compact Legend */}
          <div className="bg-white border border-gray-200 rounded-lg p-3">
            <h4 className="font-semibold text-gray-900 mb-2">Legend</h4>

            <div className="grid grid-cols-2 gap-2">
              <div className="space-y-1">
                <div className="flex items-center gap-2 text-xs">
                  <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                  <span className="text-gray-600">Campaign Deadlines</span>
                </div>
                <div className="flex items-center gap-2 text-xs">
                  <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
                  <span className="text-gray-600">Draft Deadlines</span>
                </div>
              </div>
              <div className="space-y-1">
                <div className="flex items-center gap-2 text-xs">
                  <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                  <span className="text-gray-600">Custom Tasks</span>
                </div>
                {!showAddTag && (
                  <button
                    onClick={() => setShowAddTag(true)}
                    className="flex items-center gap-1 text-xs text-gray-600 hover:text-gray-900 font-medium"
                  >
                    <Plus className="w-3 h-3" />
                    Add category
                  </button>
                )}
              </div>
            </div>

            {showAddTag && (
              <div className="mt-2 p-2 bg-gray-50 rounded border border-gray-200">
                <div className="space-y-2">
                  <CustomInput
                    type="text"
                    placeholder="Category name"
                    value={newTagName}
                    onChange={(e) => setNewTagName(e.target.value)}
                  />
                  <div className="flex gap-1">
                    {colorOptions.map((color) => (
                      <button
                        key={color}
                        onClick={() => setNewTagColor(color)}
                        className={`w-5 h-5 rounded-full ${color.split(" ")[0]} ${
                          newTagColor === color ? "ring-1 ring-gray-400" : ""
                        }`}
                      />
                    ))}
                  </div>
                  <div className="flex gap-2">
                    <button
                      onClick={addColorTag}
                      className="px-3 py-1 bg-primary text-white text-xs rounded font-medium hover:bg-gray-800"
                    >
                      Add
                    </button>
                    <button
                      onClick={() => setShowAddTag(false)}
                      className="px-3 py-1 bg-gray-200 text-gray-700 text-xs rounded hover:bg-gray-300"
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Task List (40%) */}
        <div className="col-span-2">
          <div className="bg-white border border-gray-200 rounded-lg h-full">
            <div className="p-3 border-b border-gray-200">
              <h3 className="font-bold text-gray-900">
                {monthNames[currentMonth.month - 1]} {selectedDate}
              </h3>
              <p className="text-xs text-gray-500">
                {(calendarTasks[selectedDate] || []).length} tasks scheduled
              </p>
            </div>

            {/* Tasks */}
            <div className="p-3 max-h-64 overflow-y-auto space-y-2">
              {(calendarTasks[selectedDate] || []).length === 0 ? (
                <div className="text-center">
                  <p className="text-gray-500 text-xs">No tasks for this day</p>
                </div>
              ) : (
                (calendarTasks[selectedDate] || []).map((task) => (
                  <div
                    key={task.id}
                    className={`group rounded-lg border transition-all ${
                      task.completed
                        ? "bg-gray-50 border-gray-200"
                        : "bg-white border-gray-200 hover:border-gray-300 hover:shadow-sm"
                    }`}
                  >
                    <div className="p-2">
                      <div className="flex items-start gap-2">
                        <button
                          onClick={() => toggleTask(task.id)}
                          disabled={task.isAutoGenerated}
                          className={`mt-0.5 ${task.isAutoGenerated ? "cursor-not-allowed" : "hover:scale-110 transition-transform"}`}
                        >
                          {task.completed ? (
                            <CheckSquare className="w-4 h-4 text-green-500" />
                          ) : (
                            <Square
                              className={`w-4 h-4 ${task.isAutoGenerated ? "text-gray-300" : "text-gray-400"}`}
                            />
                          )}
                        </button>

                        <div className="flex-1">
                          <p
                            className={`text-xs font-medium leading-relaxed ${
                              task.completed ? "line-through text-gray-500" : "text-gray-700"
                            }`}
                          >
                            {task.text}
                          </p>

                          <div className="flex items-center justify-between mt-1">
                            <span
                              className={`inline-flex items-center px-1.5 py-0.5 text-xs font-medium rounded ${getTagColor(task.tag.label)}`}
                            >
                              {task.tag.label}
                            </span>
                            {task.isAutoGenerated && (
                              <span className="text-xs text-amber-600 bg-amber-100 px-1.5 py-0.5 rounded font-medium">
                                Auto
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* Add Task */}
            <div className="p-3 border-t border-gray-200">
              <h4 className="font-semibold text-gray-900 mb-2 flex items-center gap-1 text-sm">
                Add Task
              </h4>

              <div className="space-y-2">
                <CustomInput
                  type="text"
                  placeholder="What needs to be done?"
                  value={newTaskText}
                  onChange={(e) => setNewTaskText(e.target.value)}
                  onKeyPress={(e) => e.key === "Enter" && addTask()}
                />

                <SimpleSelect
                  placeHolder="Choose category"
                  options={colorTags.filter(
                    (tag) => !["Campaign Deadline", "1st Draft Deadline"].includes(tag.label)
                  )}
                  onChange={(value) => setSelectedTag(value)}
                  value={selectedTag}
                />

                <CustomButton text="Add Task" onClick={addTask} />
              </div>
            </div>
          </div>
        </div>
      </div>
    </Modal>
  );
};

export default BrandCalendarModal;
